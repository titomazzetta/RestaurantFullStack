{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/* /context/AppContext.js */\nimport React, { useState } from \"react\";\nimport { logout as authLogout } from './auth'; // Import the logout function\n\n// Create auth context with default value\nvar AppContext = /*#__PURE__*/React.createContext({\n  isAuthenticated: false,\n  cart: {\n    items: [],\n    total: 0\n  },\n  addItem: function addItem() {},\n  removeItem: function removeItem() {},\n  user: null,\n  setUser: function setUser() {},\n  logout: function logout() {}\n});\nexport var AppProvider = function AppProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    user = _useState[0],\n    setUser = _useState[1];\n  var _useState2 = useState({\n      items: [],\n      total: 0\n    }),\n    cart = _useState2[0],\n    setCart = _useState2[1];\n\n  // Function to add item to the cart\n  var addItem = function addItem(item) {\n    var updatedCart = _objectSpread({}, cart);\n    var updatedItemIndex = updatedCart.items.findIndex(function (i) {\n      return i.id === item.id;\n    });\n    if (updatedItemIndex < 0) {\n      updatedCart.items.push(_objectSpread(_objectSpread({}, item), {}, {\n        quantity: 1\n      }));\n    } else {\n      var updatedItem = _objectSpread({}, updatedCart.items[updatedItemIndex]);\n      updatedItem.quantity++;\n      updatedCart.items[updatedItemIndex] = updatedItem;\n    }\n    updatedCart.total = updatedCart.items.reduce(function (total, currentItem) {\n      return total + currentItem.price * currentItem.quantity;\n    }, 0);\n    setCart(updatedCart);\n  };\n\n  // Function to remove item from the cart\n  var removeItem = function removeItem(itemId) {\n    var updatedCart = _objectSpread({}, cart);\n    var updatedItemIndex = updatedCart.items.findIndex(function (i) {\n      return i.id === itemId;\n    });\n    if (updatedItemIndex >= 0) {\n      var updatedItem = _objectSpread({}, updatedCart.items[updatedItemIndex]);\n      if (updatedItem.quantity > 1) {\n        updatedItem.quantity--;\n      } else {\n        updatedCart.items.splice(updatedItemIndex, 1);\n      }\n      updatedCart.total = updatedCart.items.reduce(function (total, currentItem) {\n        return total + currentItem.price * currentItem.quantity;\n      }, 0);\n      setCart(updatedCart);\n    }\n  };\n\n  // Include the logout function in the provider\n  var logout = function logout() {\n    authLogout();\n    setUser(null);\n    setCart({\n      items: [],\n      total: 0\n    }); // Reset cart on logout\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser,\n      logout: logout,\n      cart: cart,\n      addItem: addItem,\n      removeItem: removeItem\n    }\n  }, children);\n};\nexport default AppContext;","map":null,"metadata":{},"sourceType":"module"}