{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/* /context/AppContext.js */\nimport React, { useState } from \"react\";\nimport { logout as authLogout } from './auth'; // Import the logout function\n\n// Create auth context with default value\nconst AppContext = /*#__PURE__*/React.createContext({\n  isAuthenticated: false,\n  cart: {\n    items: [],\n    total: 0\n  },\n  addItem: () => {},\n  removeItem: () => {},\n  user: null,\n  setUser: () => {},\n  logout: () => {}\n});\nexport const AppProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: cart,\n    1: setCart\n  } = useState({\n    items: [],\n    total: 0\n  });\n\n  // Function to add item to the cart\n  const addItem = item => {\n    const updatedCart = _objectSpread({}, cart);\n    const updatedItemIndex = updatedCart.items.findIndex(i => i.id === item.id);\n    if (updatedItemIndex < 0) {\n      updatedCart.items.push(_objectSpread(_objectSpread({}, item), {}, {\n        quantity: 1\n      }));\n    } else {\n      const updatedItem = _objectSpread({}, updatedCart.items[updatedItemIndex]);\n      updatedItem.quantity++;\n      updatedCart.items[updatedItemIndex] = updatedItem;\n    }\n    updatedCart.total = updatedCart.items.reduce((total, currentItem) => {\n      return total + currentItem.price * currentItem.quantity;\n    }, 0);\n    setCart(updatedCart);\n  };\n\n  // Function to remove item from the cart\n  const removeItem = itemId => {\n    const updatedCart = _objectSpread({}, cart);\n    const updatedItemIndex = updatedCart.items.findIndex(i => i.id === itemId);\n    if (updatedItemIndex >= 0) {\n      const updatedItem = _objectSpread({}, updatedCart.items[updatedItemIndex]);\n      if (updatedItem.quantity > 1) {\n        updatedItem.quantity--;\n      } else {\n        updatedCart.items.splice(updatedItemIndex, 1);\n      }\n      updatedCart.total = updatedCart.items.reduce((total, currentItem) => {\n        return total + currentItem.price * currentItem.quantity;\n      }, 0);\n      setCart(updatedCart);\n    }\n  };\n\n  // Include the logout function in the provider\n  const logout = () => {\n    authLogout();\n    setUser(null);\n    setCart({\n      items: [],\n      total: 0\n    }); // Reset cart on logout\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      user,\n      setUser,\n      logout,\n      cart,\n      addItem,\n      removeItem\n    }\n  }, children);\n};\nexport default AppContext;","map":null,"metadata":{},"sourceType":"module"}