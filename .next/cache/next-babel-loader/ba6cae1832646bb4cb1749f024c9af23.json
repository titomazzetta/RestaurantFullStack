{"ast":null,"code":"var _jsxFileName = \"/Users/titomazzetta/Tito-Mazzetta-MIT-Bootcamp/Module-28/Resta/setting-up-stripe_starter 3/components/checkoutForm.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { useRouter } from 'next/router'; // Import useRouter\n\nimport { FormGroup, Label, Input, Modal, ModalBody } from \"reactstrap\"; // Import Modal components\n\nimport fetch from \"isomorphic-fetch\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CardSection from \"./cardSection\";\nimport AppContext from \"./context\";\nimport Cookies from \"js-cookie\";\n\nfunction CheckoutForm() {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    stripe_id: \"\"\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  const {\n    0: showSuccessModal,\n    1: setShowSuccessModal\n  } = useState(false); // State for showing success modal\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const appContext = useContext(AppContext);\n  const router = useRouter(); // Initialize useRouter hook\n\n  function onChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      [name]: value\n    }));\n  }\n\n  async function submitOrder() {\n    const cardElement = elements.getElement(CardElement);\n    const token = await stripe.createToken(cardElement);\n    const userToken = Cookies.get(\"token\");\n\n    if (token.error) {\n      setError(token.error.message);\n      return;\n    }\n\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n    const response = await fetch(`${API_URL}/orders`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userToken}`\n      },\n      body: JSON.stringify({\n        amount: Number(Math.round(appContext.cart.total + 'e2') + 'e-2'),\n        dishes: appContext.cart.items,\n        address: data.address,\n        city: data.city,\n        state: data.state,\n        token: token.token.id\n      })\n    });\n\n    if (!response.ok) {\n      setError(response.statusText);\n    } else {\n      setShowSuccessModal(true); // Display success modal\n\n      setTimeout(() => {\n        setShowSuccessModal(false); // Hide modal after 5 seconds\n\n        router.push('/'); // Redirect to home page\n      }, 5000);\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"paper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Modal, {\n    isOpen: showSuccessModal,\n    toggle: () => setShowSuccessModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Order Success! Redirecting...\")));\n}\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/titomazzetta/Tito-Mazzetta-MIT-Bootcamp/Module-28/Resta/setting-up-stripe_starter 3/components/checkoutForm.js"],"names":["React","useState","useContext","useRouter","FormGroup","Label","Input","Modal","ModalBody","fetch","CardElement","useStripe","useElements","CardSection","AppContext","Cookies","CheckoutForm","data","setData","address","city","state","stripe_id","error","setError","showSuccessModal","setShowSuccessModal","stripe","elements","appContext","router","onChange","e","name","value","target","submitOrder","cardElement","getElement","token","createToken","userToken","get","message","API_URL","process","env","NEXT_PUBLIC_API_URL","response","method","headers","Authorization","body","JSON","stringify","amount","Number","Math","round","cart","total","dishes","items","id","ok","statusText","setTimeout","push"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useRouter } from 'next/router'; // Import useRouter\nimport { FormGroup, Label, Input, Modal, ModalBody } from \"reactstrap\"; // Import Modal components\nimport fetch from \"isomorphic-fetch\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CardSection from \"./cardSection\";\nimport AppContext from \"./context\";\nimport Cookies from \"js-cookie\";\n\nfunction CheckoutForm() {\n  const [data, setData] = useState({\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    stripe_id: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const [showSuccessModal, setShowSuccessModal] = useState(false); // State for showing success modal\n  const stripe = useStripe();\n  const elements = useElements();\n  const appContext = useContext(AppContext);\n  const router = useRouter(); // Initialize useRouter hook\n\n  function onChange(e) {\n    const { name, value } = e.target;\n    setData({ ...data, [name]: value });\n  }\n\n  async function submitOrder() {\n    const cardElement = elements.getElement(CardElement);\n    const token = await stripe.createToken(cardElement);\n    const userToken = Cookies.get(\"token\");\n\n    if (token.error) {\n      setError(token.error.message);\n      return;\n    }\n\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\n    const response = await fetch(`${API_URL}/orders`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userToken}`,\n      },\n      body: JSON.stringify({\n        amount: Number(Math.round(appContext.cart.total + 'e2') + 'e-2'),\n        dishes: appContext.cart.items,\n        address: data.address,\n        city: data.city,\n        state: data.state,\n        token: token.token.id,\n      }),\n    });\n\n    if (!response.ok) {\n      setError(response.statusText);\n    } else {\n      setShowSuccessModal(true); // Display success modal\n      setTimeout(() => {\n        setShowSuccessModal(false); // Hide modal after 5 seconds\n        router.push('/'); // Redirect to home page\n      }, 5000);\n    }\n  }\n\n  return (\n    <div className=\"paper\">\n      {/* Form Fields and Card Section here... */}\n      \n      {/* ... other form fields and CardSection component ... */}\n\n      {/* Success Modal */}\n      <Modal isOpen={showSuccessModal} toggle={() => setShowSuccessModal(false)}>\n        <ModalBody>\n          Order Success! Redirecting...\n        </ModalBody>\n      </Modal>\n      \n      {/* ... existing JSX and styling ... */}\n    </div>\n  );\n}\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}