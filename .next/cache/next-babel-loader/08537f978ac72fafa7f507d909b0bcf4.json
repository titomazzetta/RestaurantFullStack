{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n/* /lib/auth.js */\n\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\n//register a new user\nexport const registerUser = (username, email, password) => {\n  //prevent function from being ran on the server\n  if (true) {\n    return;\n  }\n  return new Promise((resolve, reject) => {\n    axios.post(`${API_URL}/auth/local/register`, {\n      username,\n      email,\n      password\n    }).then(res => {\n      //set token response from Strapi for server validation\n      Cookie.set(\"token\", res.data.jwt);\n\n      //resolve the promise to set loading to false in SignUp form\n      resolve(res);\n      //redirect back to home page for restaurance selection\n      Router.push(\"/\");\n    }).catch(error => {\n      //reject the promise and pass the error object back to the form\n      reject(error);\n    });\n  });\n};\nexport const login = (identifier, password) => {\n  //prevent function from being ran on the server\n  if (true) {\n    return;\n  }\n  return new Promise((resolve, reject) => {\n    axios.post(`${API_URL}/auth/local/`, {\n      identifier,\n      password\n    }).then(res => {\n      //set token response from Strapi for server validation\n      Cookie.set(\"token\", res.data.jwt);\n\n      //resolve the promise to set loading to false in SignUp form\n      resolve(res);\n      //redirect back to home page for restaurance selection\n      Router.push(\"/\");\n    }).catch(error => {\n      //reject the promise and pass the error object back to the form\n      reject(error);\n    });\n  });\n};\nexport const logout = () => {\n  //remove token and user cookie\n  Cookie.remove(\"token\");\n  delete window.__user;\n  // sync logout between multiple windows\n  window.localStorage.setItem(\"logout\", Date.now());\n  //redirect to the home page\n  Router.push(\"/\");\n};\n\n//Higher Order Component to wrap our pages and logout simultaneously logged in tabs\n// THIS IS NOT USED in the tutorial, only provided if you wanted to implement\nexport const withAuthSync = Component => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === \"logout\") {\n        Router.push(\"/login\");\n      }\n    };\n    useEffect(() => {\n      window.addEventListener(\"storage\", syncLogout);\n      return () => {\n        window.removeEventListener(\"storage\", syncLogout);\n        window.localStorage.removeItem(\"logout\");\n      };\n    }, []);\n    return /*#__PURE__*/React.createElement(Component, props);\n  };\n  if (Component.getInitialProps) {\n    Wrapper.getInitialProps = Component.getInitialProps;\n  }\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}